buildscript {
    ext {
        springBootVersion = '2.3.4.RELEASE'
        kotlinVersion = '1.4.10'
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:1.0.22.RELEASE"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.jetbrains.kotlin.plugin.allopen' version "$kotlinVersion"
    id 'jacoco'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

group 'ga.patrick'
version '1.0'

sourceCompatibility = 12
targetCompatibility = 12

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-webflux"
	implementation "org.springframework.restdocs:spring-restdocs-mockmvc"
	implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
	implementation "org.jetbrains.kotlin:kotlin-reflect"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.github.microutils:kotlin-logging:1.6.26"
    implementation "com.jayway.jsonpath:json-path:2.4.0"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.9'

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "com.marcinziolo:kotlin-wiremock:1.0.0"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock:2.2.4.RELEASE'
}

test {
    useJUnitPlatform()
}
test.finalizedBy jacocoTestReport
jacocoTestCoverageVerification.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    executionData tasks.withType(Test)
    violationRules {
        failOnViolation = true
        rule {
            element = 'CLASS'
            excludes = [
                    "**Application**",
                    "**Properties**",
                    "**DTO**"
                    ]
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.7
            }
            limit {
                counter = 'METHOD'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
        }
    }
}

jacoco {
    reportsDir = file("$buildDir/jacoco")
}